name: Release on main

on:
  push:
    branches: [ main ]

concurrency:
  group: release-main
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          scope: '@limeyfy'
          always-auth: true
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Configure npm auth
        if: env.NODE_AUTH_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          npm whoami || true

      - name: Ensure unique version (bump patch if exists)
        id: ensure_version
        env:
          PACKAGE_NAME: ${{ github.event.repository.name }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const cp = require('child_process');
          const pkg = JSON.parse(fs.readFileSync('package.json','utf8'));
          const name = pkg.name;
          const current = pkg.version;
          let published = [];
          try {
            const out = cp.execSync(`npm view ${name} versions --json`, { encoding: 'utf8' }).trim();
            published = JSON.parse(out || '[]');
          } catch (e) {
            // package may not exist yet; continue
          }
          const exists = Array.isArray(published) && published.includes(current);
          let next = current;
          let bumped = false;
          if (exists) {
            cp.execSync('npm version patch --no-git-tag-version', { stdio: 'inherit' });
            next = JSON.parse(fs.readFileSync('package.json','utf8')).version;
            bumped = true;
            console.log(`Bumped version to ${next}`);
          } else {
            console.log(`Using version ${current}`);
          }
          const outFile = process.env.GITHUB_OUTPUT;
          if (outFile) {
            fs.appendFileSync(outFile, `version=${next}\n`);
            fs.appendFileSync(outFile, `bumped=${String(bumped)}\n`);
          }
          NODE

      - name: Commit version bump
        if: steps.ensure_version.outputs.bumped == 'true'
        run: |
          git add package.json
          git commit -m "chore(release): bump version to ${{ steps.ensure_version.outputs.version }}"
          git push
          
      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version [skip ci]" || echo "No changes to commit"
          git push origin main

      - name: Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Release (tag, GitHub Release, npm publish)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm run build
          pnpm release -- --ci from-package
